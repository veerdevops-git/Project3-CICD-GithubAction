name: CI/CD Pipeline  # Name of the workflow

on:
  push:
    branches: [ main ]  # Trigger the pipeline when code is pushed to the 'main' branch

jobs:
  build-test:
    runs-on: ubuntu-latest  # Run the job on the latest Ubuntu environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Step to check out the code from the repository

      - name: Set up Node.js
        uses: actions/setup-node@v3  # Set up Node.js environment
        with:
          node-version: 18  # Specify the Node.js version to use (v18)

      - name: Install Dependencies
        run: npm install  # Run npm install to install the dependencies listed in package.json

      - name: Run Tests
        run: npm test  # Run tests using npm (assumes tests are defined in package.json)

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4  # Upload build artifacts for further steps
        with:
          name: node-app-artifact  # Name of the artifact
          path: .  # Path to the build files to upload

  docker:
    needs: build-test  # This job will run after the build-test job has completed successfully
    runs-on: ubuntu-latest  # Run this job on the latest Ubuntu environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Check out the code again for the docker build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3  # Log in to Docker Hub to push images
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Use the secret for Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }}  # Use the secret for Docker Hub password

      - name: Set version tag for Docker image
        id: set_version  # Set the version tag based on commit hash
        run: |
          # Generate a version tag using the short Git commit hash
          VERSION_TAG=$(echo "${{ github.sha }}" | head -c 7) # Get the first 7 characters of the commit hash
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV  # Save the version tag to GitHub environment
          echo "Generated Docker Image Tag: $VERSION_TAG"  # Output the generated version tag for debugging

      - name: Build Docker Image
        run: |
          # Build the Docker image with the generated version tag
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-app:${{ env.VERSION_TAG }} .  # Build image with commit hash tag
          # Optionally, tag the image as 'latest' as well
          docker tag ${{ secrets.DOCKER_USERNAME }}/node-app:${{ env.VERSION_TAG }} ${{ secrets.DOCKER_USERNAME }}/node-app:latest  # Tag image with 'latest'

      - name: Push Docker Image
        run: |
          # Push the Docker image with the commit hash tag
          docker push ${{ secrets.DOCKER_USERNAME }}/node-app:${{ env.VERSION_TAG }}  # Push the versioned tag
          # Push the 'latest' tag to Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/node-app:latest  # Push the 'latest' tag

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4  # Upload build artifacts to GitHub for further use
        with:
          name: node-app-artifact  # Name of the artifact
          path: .  # Path to the artifact to upload
